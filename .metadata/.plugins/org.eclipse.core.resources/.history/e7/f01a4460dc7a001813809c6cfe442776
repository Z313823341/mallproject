package cn.e3mall.cart.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.e3mall.cart.service.CartService;
import cn.e3mall.pojo.TbItem;
import cn.e3mall.pojo.TbUser;
import cn.e3mall.service.ItemService;
import cn.e3mall.utils.CookieUtils;
import cn.e3mall.utils.E3Result;
import cn.e3mall.utils.JsonUtils;

@Controller
public class CartController {
	 
	@Autowired
	private ItemService itemService;
	@Value("${COOKIE_CART_EXPIRE}")
	private Integer COOKIE_CART_EXPIRE;
	@Autowired
	private CartService cartService;
	/**
	 * 添加购物车
	 *
	 */
	@RequestMapping("/cart/add/{itemId}")
	public String addCart(@PathVariable Long itemId, @RequestParam(defaultValue="1")Integer num,
			HttpServletRequest request, HttpServletResponse response) {
		//判断用户是否登陆，如果是登陆状态，把购物车写入redis，如果没登陆，把购物车写入cookies
		TbUser user = (TbUser) request.getAttribute("user");
		if(user!=null){
			//把购物车信息保存到服务端，并返回逻辑视图
			cartService.addCart(user.getId(), itemId, num);
			return "cartSuccess";
		}
		//从cookie中取购物车列表
		List<TbItem> list = getCartListFormCookie(request);
		//判断商品是否在商品列表中存在
		boolean flag = false;
		for (TbItem tbItem : list) {
			if(tbItem.getId()==itemId.longValue()){
				flag = true;
				tbItem.setNum(tbItem.getNum()+num);
				//跳出循环
				break;
			}
		}
		//如果不存在，根据商品id查询商品信息，得到一个tbItem对象
		if(!flag){
			TbItem tbItem = itemService.getItemById(itemId);
			tbItem.setNum(num);
			//取一张图片
			String image = tbItem.getImage();
			if(StringUtils.isNotBlank(image)){
				tbItem.setImage(image.split(",")[0]);
			}
			//把商品添加到商品列表
			list.add(tbItem);
		}
		//写入cookie
		CookieUtils.setCookie(request, response, "cart", JsonUtils.objectToJson(list), COOKIE_CART_EXPIRE,true);
		return "cartSuccess";
	}
	
	
	
	
	private List<TbItem> getCartListFormCookie(HttpServletRequest request){
		
		String json = CookieUtils.getCookieValue(request, "cart",true);
		//判断json是否为空
		if(StringUtils.isBlank(json)){
			return new ArrayList<>();
		}
		//把json转换成商品列表
		List<TbItem> list = JsonUtils.jsonToList(json, TbItem.class);
		return list;
	}
	//展示购物车列表
	@RequestMapping("/cart/cart")
	public String showCartList(HttpServletRequest request,HttpServletResponse responer){
		//从cookie中取出购物车列表
		List<TbItem> cartList = getCartListFormCookie(request);
		//判断用户是否为登陆状态
		//若为登陆状态，从cookies中取出商品信息，与redis中商品信息合并，从服务端取购物车列表，
		//并清除cookies中商品信息
		//若不在登陆状态，
		TbUser user = (TbUser) request.getAttribute("user");
		if(user!=null){
			cartService.mergeCart(user.getId(), cartList);
			//把cookie中的商品信息删除
			CookieUtils.deleteCookie(request, responer, "cart");
			//从服务端取购物车列表
			cartList = cartService.getCartList(user.getId());
		
		}

		//把列表传递给界面
		request.setAttribute("cartList", cartList);
		return "cart";
	}
	
	
	//更新购物车商品信息数量
	@RequestMapping("/cart/update/num/{itemId}/{num}")
	@ResponseBody
	public E3Result refreshNum(@PathVariable Long itemId,@PathVariable Integer num,HttpServletRequest request,HttpServletResponse response){
		//判断用户是否登陆
		TbUuser user = (TbUser)request.getAttribute("user")
			//从cookie中取购物车信息
		List<TbItem> list = getCartListFormCookie(request);
		
		for (TbItem tbItem : list) {
			if(tbItem.getId() == itemId.longValue()){
				//找到对应商品，更新数量
		        tbItem.setNum(num);
		        break;
			}
		}
		//把商品信息写回cookie
		CookieUtils.setCookie(request, response, "cart", JsonUtils.objectToJson(list), COOKIE_CART_EXPIRE,true);

		return E3Result.ok();
	}
	
	//删除购物车商品
	@RequestMapping("/cart/delete/{itemId}")
	public String delectCatr(@PathVariable Long itemId,HttpServletRequest request,HttpServletResponse response){
		
		//从cookie中取出购物车商品信息
		List<TbItem> list = getCartListFormCookie(request);
		//遍历商品列表，找到对应的商品id
		for (TbItem tbItem : list) {
			if(tbItem.getId() == itemId.longValue()){
				list.remove(tbItem);
				
				break;
			}
		}
		//把商品信息写回cookie
		CookieUtils.setCookie(request, response, "cart", JsonUtils.objectToJson(list), COOKIE_CART_EXPIRE,true);
		return "redirect:/cart/cart.html";
	}
	
	
	
	
}	
	


